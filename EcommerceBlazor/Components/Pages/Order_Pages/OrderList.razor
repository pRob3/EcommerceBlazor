@page "/order/list"
@using EcommerceBlazor.Components.Account
@using EcommerceBlazor.Utility
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

@if (_isProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h1 class="text-white py-2">Order List</h1>
                </div>
            </div>
        </div>
        <div class="card-body p-4">

            @if (OrderHeaders.Any())
            {
                <RadzenDataGrid 
                    AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced"
                    AllowSorting="true"
                    PageSize="5"
                    AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@OrderHeaders"
                    ColumnWidth="300px"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single">
                    <Columns>
                        <RadzenDataGridColumn Property="Id" Filterable="true" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" Width="120px" />
                        <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                        <RadzenDataGridColumn Property="Email" Title="Email" Width="200px" />
                        <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" />
                        <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
                        <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" />
                        <RadzenDataGridColumn Title="Action" Frozen="false" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="orderHeader">
                                <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary"
                                              Click="@(()=>_navigationManager.NavigateTo($"order/details/{orderHeader.Id}"))">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>               
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No categories found.
                </div>
            }
        </div>
    </div>
}

@code {
    private bool _isProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();

    private bool? _isAdmin { get; set; }
    private string? _userId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrderHeaders();

            _isProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadOrderHeaders()
    {
        _isProcessing = true;
        StateHasChanged();

        await CheckAuthorization();
        if (_isAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(_userId);
        }

        _isProcessing = false;
    }

    private async Task CheckAuthorization()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            _isAdmin = user?.IsInRole(SD.Role_Admin);
            _userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        }
    }
}
